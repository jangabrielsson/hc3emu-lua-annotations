{
	"Insert hc3emu header": {
		"scope": "lua",
		"prefix": "hc3emu",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%%name=${1:MyQA}",
			"--%%type=com.fibaro.${2:binarySwitch}"
		],
		"description": "Inserts a header to invoke hc3emu emulator"
	},
	"floodSensor": {
		"scope": "lua",
		"prefix": "com.fibaro.floodSensor",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.floodSensor",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Flood sensor type have no actions to handle",
			"-- To update flood sensor state, update property \"value\" with boolean",
			"-- Eg. self:updateProperty(\"value\", true) will indicate that flood was detected ",
			""
		],
		"description": "Inserts a template for a com.fibaro.floodSensor"
	},
	"colorController": {
		"scope": "lua",
		"prefix": "com.fibaro.colorController",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.colorController",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Color controller type should handle actions: turnOn, turnOff, setValue, setColor",
			"-- To update color controller state, update property color with a string in the following format: \"r,g,b,w\" eg. \"200,10,100,255\"",
			"-- To update brightness, update property \"value\" with integer 0-99",
			"function QuickApp:turnOn()",
			"    self:debug(\"color controller turned on\")",
			"    self:updateProperty(\"value\", 99)",
			"end",
			"",
			"function QuickApp:turnOff()",
			"    self:debug(\"color controller turned off\")",
			"    self:updateProperty(\"value\", 0)    ",
			"end",
			"",
			"-- Value is type of integer (0-99)",
			"function QuickApp:setValue(value)",
			"    self:debug(\"color controller value set to: \", value)",
			"    self:updateProperty(\"value\", value)    ",
			"end",
			"",
			"-- Color is type of table, with format [r,g,b,w]",
			"-- Eg. relaxing forest green, would look like this: [34,139,34,150]",
			"function QuickApp:setColor(r,g,b,w)",
			"    local color = string.format(\"%d,%d,%d,%d\", r or 0, g or 0, b or 0, w or 0) ",
			"    self:debug(\"color controller color set to: \", color)",
			"    self:updateProperty(\"color\", color)",
			"    self:setColorComponents({red=r, green=g, blue=b, white=w})",
			"end",
			"",
			"function QuickApp:setColorComponents(colorComponents)",
			"    local cc = self.properties.colorComponents",
			"    local isColorChanged = false",
			"    for k,v in pairs(colorComponents) do",
			"        if cc[k] and cc[k] ~= v then",
			"            cc[k] = v",
			"            isColorChanged = true",
			"        end",
			"    end",
			"    if isColorChanged == true then",
			"        self:updateProperty(\"colorComponents\", cc)",
			"        self:setColor(cc[\"red\"], cc[\"green\"], cc[\"blue\"], cc[\"white\"])",
			"    end",
			"end",
			"",
			"-- To update controls you can use method self:updateView(<component ID>, <component property>, <desired value>). Eg:  ",
			"-- self:updateView(\"slider\", \"value\", \"55\") ",
			"-- self:updateView(\"button1\", \"text\", \"MUTE\") ",
			"-- self:updateView(\"label\", \"text\", \"TURNED ON\") ",
			"",
			"-- This is QuickApp inital method. It is called right after your QuickApp starts (after each save or on gateway startup). ",
			"-- Here you can set some default values, setup http connection or get QuickApp variables.",
			"-- To learn more, please visit: ",
			"--    * https://manuals.fibaro.com/home-center-3/",
			"--    * https://manuals.fibaro.com/home-center-3-quick-apps/",
			"",
			"function QuickApp:onInit()",
			"    self:debug(\"onInit\")",
			"    self:updateProperty(\"colorComponents\", {red=0, green=0, blue=0, warmWhite=0})",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.colorController"
	},
	"deviceController": {
		"scope": "lua",
		"prefix": "com.fibaro.deviceController",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.deviceController",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Device Controller is a little more advanced than other types. ",
			"-- It can create child devices, so it can be used for handling multiple physical devices.",
			"-- E.g. when connecting to a hub, some cloud service or just when you want to represent a single physical device as multiple endpoints.",
			"-- ",
			"-- Basic knowledge of object-oriented programming (oop) is required. ",
			"-- Learn more about oop: https://en.wikipedia.org/wiki/Object-oriented_programming ",
			"-- Learn more about managing child devices: https://manuals.fibaro.com/home-center-3-quick-apps/",
			"",
			"function QuickApp:onInit()",
			"    self:debug(\"QuickApp:onInit\")",
			"",
			"    -- Setup classes for child devices.",
			"    -- Here you can assign how child instances will be created.",
			"    -- If type is not defined, QuickAppChild will be used.",
			"    self:initChildDevices({",
			"        [\"com.fibaro.binarySwitch\"] = MyBinarySwitch,",
			"    })",
			"",
			"    -- Print all child devices.",
			"    self:debug(\"Child devices:\")",
			"    for id,device in pairs(self.childDevices) do",
			"        self:debug(\"[\", id, \"]\", device.name, \", type of: \", device.type)",
			"    end",
			"end",
			"",
			"-- Sample method to create a new child. It can be used in a button. ",
			"function QuickApp:createChild()",
			"    local child = self:createChildDevice({",
			"        name = \"child\",",
			"        type = \"com.fibaro.binarySwitch\",",
			"    }, MyBinarySwitch)",
			"",
			"    self:trace(\"Child device created: \", child.id)",
			"end",
			"",
			"-- Sample class for handling your binary switch logic. You can create as many classes as you need.",
			"-- Each device type you create should have its class which inherits from the QuickAppChild type.",
			"class 'MyBinarySwitch' (QuickAppChild)",
			"",
			"-- __init is a constructor for this class. All new classes must have it.",
			"function MyBinarySwitch:__init(device)",
			"    -- You should not insert code before QuickAppChild.__init. ",
			"    QuickAppChild.__init(self, device) ",
			"",
			"    self:debug(\"MyBinarySwitch init\")   ",
			"end",
			"",
			"function MyBinarySwitch:turnOn()",
			"    self:debug(\"child\", self.id, \"turned on\")",
			"    self:updateProperty(\"value\", true)",
			"end",
			"",
			"function MyBinarySwitch:turnOff()",
			"    self:debug(\"child\", self.id, \"turned off\")",
			"    self:updateProperty(\"value\", false)",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.deviceController"
	},
	"multilevelSwitch": {
		"scope": "lua",
		"prefix": "com.fibaro.multilevelSwitch",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.multilevelSwitch",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Multilevel switch type should handle actions: turnOn, turnOff, setValue",
			"-- To update multilevel switch state, update property \"value\" with integer 0-99",
			"",
			"function QuickApp:turnOn()",
			"    self:debug(\"multilevel switch turned on\")",
			"    self:updateProperty(\"value\", 99)",
			"end",
			"",
			"function QuickApp:turnOff()",
			"    self:debug(\"multilevel switch turned off\")",
			"    self:updateProperty(\"value\", 0)    ",
			"end",
			"",
			"-- Value is type of integer (0-99)",
			"function QuickApp:setValue(value)",
			"    self:debug(\"multilevel switch set to: \" .. tostring(value))",
			"    self:updateProperty(\"value\", value)    ",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.multilevelSwitch"
	},
	"hvacSystemCool": {
		"scope": "lua",
		"prefix": "com.fibaro.hvacSystemCool",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.hvacSystemCool",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Thermostat cool should handle actions: setThermostatMode, setCoolingThermostatSetpoint",
			"-- Proeprties that should be updated:",
			"-- * supportedThermostatModes - array of modes supported by the thermostat eg. {\"Off\", \"Cool\"}",
			"-- * thermostatMode - current mode of the thermostat",
			"-- * coolingThermostatSetpoint - set point for cooling, supported units: \"C\" - Celsius, \"F\" - Fahrenheit",
			"",
			"-- handle action for mode change ",
			"function QuickApp:setThermostatMode(mode)",
			"    self:updateProperty(\"thermostatMode\", mode)",
			"end",
			"",
			"-- handle action for setting set point for cooling",
			"function QuickApp:setCoolingThermostatSetpoint(value) ",
			"    self:updateProperty(\"coolingThermostatSetpoint\", { value= value, unit= \"C\" })",
			"end",
			"",
			"-- To update controls you can use method self:updateView(<component ID>, <component property>, <desired value>). Eg:  ",
			"-- self:updateView(\"slider\", \"value\", \"55\") ",
			"-- self:updateView(\"button1\", \"text\", \"MUTE\") ",
			"-- self:updateView(\"label\", \"text\", \"TURNED ON\") ",
			"",
			"-- This is QuickApp inital method. It is called right after your QuickApp starts (after each save or on gateway startup). ",
			"-- Here you can set some default values, setup http connection or get QuickApp variables.",
			"-- To learn more, please visit: ",
			"--    * https://manuals.fibaro.com/home-center-3/",
			"--    * https://manuals.fibaro.com/home-center-3-quick-apps/",
			"",
			"function QuickApp:onInit()",
			"    self:debug(\"onInit\")",
			"",
			"    -- set supported modes for thermostat",
			"    self:updateProperty(\"supportedThermostatModes\", {\"Off\", \"Cool\"})",
			"",
			"    -- setup default values",
			"    self:updateProperty(\"thermostatMode\", \"Cool\")",
			"    self:setCoolingThermostatSetpoint(23)",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.hvacSystemCool"
	},
	"windSensor": {
		"scope": "lua",
		"prefix": "com.fibaro.windSensor",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.windSensor",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Wind sensor type have no actions to handle",
			"-- To update wind value, update property \"value\" with floating point number",
			"-- Eg. self:updateProperty(\"value\", 81.42) ",
			""
		],
		"description": "Inserts a template for a com.fibaro.windSensor"
	},
	"remoteController": {
		"scope": "lua",
		"prefix": "com.fibaro.remoteController",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.remoteController",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Remote controller type have no actions to handle",
			"",
			"-- Method for emitting central scene events. Default value for keyAttribute is \"Pressed\" ",
			"-- Sample usage: self:emitCentralSceneEvent(1, \"Pressed\")",
			"function QuickApp:emitCentralSceneEvent(keyId, keyAttribute)",
			"    if keyAttribute == nil then",
			"        keyAttribute = \"Pressed\"",
			"    end",
			"",
			"    local eventData = {",
			"        type = \"centralSceneEvent\",",
			"        source = self.id,",
			"        data = {",
			"            keyAttribute = keyAttribute,",
			"            keyId = keyId",
			"        }",
			"    }",
			"    api.post(\"/plugins/publishEvent\", eventData)",
			"end",
			"",
			"-- To update controls you can use method self:updateView(<component ID>, <component property>, <desired value>). Eg:  ",
			"-- self:updateView(\"slider\", \"value\", \"55\") ",
			"-- self:updateView(\"button1\", \"text\", \"MUTE\") ",
			"-- self:updateView(\"label\", \"text\", \"TURNED ON\") ",
			"",
			"-- This is QuickApp inital method. It is called right after your QuickApp starts (after each save or on gateway startup). ",
			"-- Here you can set some default values, setup http connection or get QuickApp variables.",
			"-- To learn more, please visit: ",
			"--    * https://manuals.fibaro.com/home-center-3/",
			"--    * https://manuals.fibaro.com/home-center-3-quick-apps/",
			"",
			"function QuickApp:onInit()",
			"    self:debug(\"onInit\")",
			"",
			"    -- Setup supported keys and attributes of the device",
			"    -- Scenes will display possible triggers according to these values",
			"    self:updateProperty(\"centralSceneSupport\",  {",
			"        { keyAttributes = { \"Pressed\",\"Released\",\"HeldDown\",\"Pressed2\",\"Pressed3\" }, keyId = 1 },",
			"        { keyAttributes = { \"Pressed\",\"Released\",\"HeldDown\",\"Pressed2\",\"Pressed3\" }, keyId = 2 },",
			"        { keyAttributes = { \"Pressed\",\"Released\",\"HeldDown\",\"Pressed2\",\"Pressed3\" }, keyId = 3 },",
			"        { keyAttributes = { \"Pressed\",\"Released\",\"HeldDown\",\"Pressed2\",\"Pressed3\" }, keyId = 4 },",
			"        { keyAttributes = { \"Pressed\",\"Released\",\"HeldDown\",\"Pressed2\",\"Pressed3\" }, keyId = 5 },",
			"        { keyAttributes = { \"Pressed\",\"Released\",\"HeldDown\",\"Pressed2\",\"Pressed3\" }, keyId = 6 },",
			"    })",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.remoteController"
	},
	"hvacSystemHeat": {
		"scope": "lua",
		"prefix": "com.fibaro.hvacSystemHeat",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.hvacSystemHeat",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Thermostat heat should handle actions: setThermostatMode, setHeatingThermostatSetpoint",
			"-- Proeprties that should be updated:",
			"-- * supportedThermostatModes - array of modes supported by the thermostat eg. {\"Off\", \"Heat\"}",
			"-- * thermostatMode - current mode of the thermostat",
			"-- * heatingThermostatSetpoint - set point for heating, supported units: \"C\" - Celsius, \"F\" - Fahrenheit",
			"",
			"-- handle action for mode change ",
			"function QuickApp:setThermostatMode(mode)",
			"    self:updateProperty(\"thermostatMode\", mode)",
			"end",
			"",
			"-- handle action for setting set point for heating",
			"function QuickApp:setHeatingThermostatSetpoint(value) ",
			"    self:updateProperty(\"heatingThermostatSetpoint\", { value= value, unit= \"C\" })",
			"end",
			"",
			"-- To update controls you can use method self:updateView(<component ID>, <component property>, <desired value>). Eg:  ",
			"-- self:updateView(\"slider\", \"value\", \"55\") ",
			"-- self:updateView(\"button1\", \"text\", \"MUTE\") ",
			"-- self:updateView(\"label\", \"text\", \"TURNED ON\") ",
			"",
			"-- This is QuickApp inital method. It is called right after your QuickApp starts (after each save or on gateway startup). ",
			"-- Here you can set some default values, setup http connection or get QuickApp variables.",
			"-- To learn more, please visit: ",
			"--    * https://manuals.fibaro.com/home-center-3/",
			"--    * https://manuals.fibaro.com/home-center-3-quick-apps/",
			"",
			"function QuickApp:onInit()",
			"    self:debug(\"onInit\")",
			"",
			"    -- set supported modes for thermostat",
			"    self:updateProperty(\"supportedThermostatModes\", {\"Off\", \"Heat\"})",
			"",
			"    -- setup default values",
			"    self:updateProperty(\"thermostatMode\", \"Heat\")",
			"    self:setHeatingThermostatSetpoint(20)",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.hvacSystemHeat"
	},
	"windowSensor": {
		"scope": "lua",
		"prefix": "com.fibaro.windowSensor",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.windowSensor",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Window sensor type have no actions to handle",
			"-- To update window sensor state, update property \"value\" with boolean",
			"-- Eg. self:updateProperty(\"value\", true) will set sensor to breached state",
			""
		],
		"description": "Inserts a template for a com.fibaro.windowSensor"
	},
	"doorSensor": {
		"scope": "lua",
		"prefix": "com.fibaro.doorSensor",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.doorSensor",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Door sensor type have no actions to handle",
			"-- To update door sensor state, update property \"value\" with boolean",
			"-- Eg. self:updateProperty(\"value\", true) will set sensor to breached state",
			""
		],
		"description": "Inserts a template for a com.fibaro.doorSensor"
	},
	"binarySwitch": {
		"scope": "lua",
		"prefix": "com.fibaro.binarySwitch",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.binarySwitch",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Binary switch type should handle actions turnOn, turnOff",
			"-- To update binary switch state, update property \"value\" with boolean",
			"",
			"function QuickApp:turnOn()",
			"    self:debug(\"binary switch turned on\")",
			"    self:updateProperty(\"value\", true)",
			"end",
			"",
			"function QuickApp:turnOff()",
			"    self:debug(\"binary switch turned off\")",
			"    self:updateProperty(\"value\", false)    ",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.binarySwitch"
	},
	"genericDevice": {
		"scope": "lua",
		"prefix": "com.fibaro.genericDevice",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.genericDevice",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Generic device type have no default actions to handle",
			""
		],
		"description": "Inserts a template for a com.fibaro.genericDevice"
	},
	"energyMeter": {
		"scope": "lua",
		"prefix": "com.fibaro.energyMeter",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.energyMeter",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Energy meter type have no actions to handle",
			"-- To update energy consumption, update property \"value\" with appropriate floating point number",
			"-- Reported value must be in kWh",
			"-- Eg. ",
			"-- self:updateProperty(\"value\", 226.137) ",
			""
		],
		"description": "Inserts a template for a com.fibaro.energyMeter"
	},
	"temperatureSensor": {
		"scope": "lua",
		"prefix": "com.fibaro.temperatureSensor",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.temperatureSensor",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Temperature sensor type have no actions to handle",
			"-- To update temperature, update property \"value\" with floating point number, supported units: \"C\" - Celsius, \"F\" - Fahrenheit",
			"-- Eg. self:updateProperty(\"value\", { value= 18.12, unit= \"C\" }) ",
			""
		],
		"description": "Inserts a template for a com.fibaro.temperatureSensor"
	},
	"motionSensor": {
		"scope": "lua",
		"prefix": "com.fibaro.motionSensor",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.motionSensor",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Motion sensor type has no actions to handle",
			"-- To update motion sensor state, update property \"value\" with boolean",
			"-- Eg. self:updateProperty(\"value\", true) will indicate that motion was detected",
			""
		],
		"description": "Inserts a template for a com.fibaro.motionSensor"
	},
	"player": {
		"scope": "lua",
		"prefix": "com.fibaro.player",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.player",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Player type should handle actions: play, pause, stop, next, prev, setVolume, setMute",
			"-- To update player state, update properties:",
			"-- * \"volume\" with integer 0-100",
			"-- * \"mute\" with boolean",
			"-- * \"power\" with boolean",
			"",
			"function QuickApp:play()",
			"    self:debug(\"handle play\")",
			"end",
			"",
			"function QuickApp:pause()",
			"    self:debug(\"handle pause\")",
			"end",
			"",
			"function QuickApp:stop()",
			"    self:debug(\"handle stop\")",
			"end",
			"",
			"function QuickApp:next()",
			"    self:debug(\"handle next\")",
			"end",
			"",
			"function QuickApp:prev()",
			"    self:debug(\"handle prev\")",
			"end",
			"",
			"function QuickApp:setVolume(volume)",
			"    self:debug(\"setting volume to:\", volume)",
			"    self:updateProperty(\"volume\", volume)",
			"end",
			"",
			"function QuickApp:setMute(mute)",
			"    if mute == 0 then ",
			"        self:debug(\"setting mute to:\", false)",
			"        self:updateProperty(\"mute\", false)",
			"    else",
			"        self:debug(\"setting mute to:\", true)",
			"        self:updateProperty(\"mute\", true)",
			"    end",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.player"
	},
	"binarySensor": {
		"scope": "lua",
		"prefix": "com.fibaro.binarySensor",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.binarySensor",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Binary sensor type have no actions to handle",
			"-- To update binary sensor state, update property \"value\" with boolean",
			"-- Eg. self:updateProperty(\"value\", true) will set sensor to breached state",
			""
		],
		"description": "Inserts a template for a com.fibaro.binarySensor"
	},
	"coDetector": {
		"scope": "lua",
		"prefix": "com.fibaro.coDetector",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.coDetector",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Carbon monoxide detector type has no actions to handle",
			"-- To update carbon monoxide detector state, update property \"value\" with boolean",
			"-- Eg. self:updateProperty(\"value\", true) will indicate that carbon monoxide was detected",
			""
		],
		"description": "Inserts a template for a com.fibaro.coDetector"
	},
	"powerMeter": {
		"scope": "lua",
		"prefix": "com.fibaro.powerMeter",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.powerMeter",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Power meter type have no actions to handle",
			"-- To update energy consumption, update property \"value\" with appropriate floating point number",
			"-- Reported value must be in W",
			"-- Eg. ",
			"-- self:updateProperty(\"value\", 226.137)",
			"-- Power meter contains property rateType, which has two possible values:",
			"-- - production - responsible for production power measurement",
			"-- - consumption - responsible for consumption power measurement",
			"-- Eg.",
			"-- self:updateProperty(\"rateType\", \"production\")",
			"-- self:updateProperty(\"rateType\", \"consumption\")",
			""
		],
		"description": "Inserts a template for a com.fibaro.powerMeter"
	},
	"alarmPartition": {
		"scope": "lua",
		"prefix": "com.fibaro.alarmPartition",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.alarmPartition",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Alarm partition type should handle following actions: arm, disarm",
			"-- To update arm state of alarm partition, update property \"armed\" with boolean",
			"-- To update alarm state of alarm partiton, update property \"alarm\" with boolean",
			"-- Eg. self:updateProperty(\"alarm\", true) will indicate that alarm partition was breached",
			"",
			"function QuickApp:arm()",
			"    self:debug(\"alarm partition armed\")",
			"    self:updateProperty(\"armed\", true)",
			"end",
			"",
			"function QuickApp:disarm()",
			"    self:debug(\"alarm partition disarmed\")",
			"    self:updateProperty(\"armed\", false)    ",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.alarmPartition"
	},
	"fireDetector": {
		"scope": "lua",
		"prefix": "com.fibaro.fireDetector",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.fireDetector",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Fire detector type has no actions to handle",
			"-- To update fire detector state, update property \"value\" with boolean",
			"-- Eg. self:updateProperty(\"value\", true) will indicate that fire was detected",
			""
		],
		"description": "Inserts a template for a com.fibaro.fireDetector"
	},
	"heatDetector": {
		"scope": "lua",
		"prefix": "com.fibaro.heatDetector",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.heatDetector",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Heat detector type has no actions to handle",
			"-- To update heat detector state, update property \"value\" with boolean",
			"-- Eg. self:updateProperty(\"value\", true) will indicate that heat was detected",
			""
		],
		"description": "Inserts a template for a com.fibaro.heatDetector"
	},
	"hvacSystemAuto": {
		"scope": "lua",
		"prefix": "com.fibaro.hvacSystemAuto",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.hvacSystemAuto",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Thermostat auto should handle actions: setThermostatMode, setCoolingThermostatSetpoint, setHeatingThermostatSetpoint",
			"-- Properties that should be updated:",
			"-- * supportedThermostatModes - array of modes supported by the thermostat eg. {\"Auto\", \"Off\", \"Heat\", \"Cool\"}",
			"-- * thermostatMode - current mode of the thermostat",
			"-- * coolingThermostatSetpoint - set point for cooling, supported units: \"C\" - Celsius, \"F\" - Fahrenheit",
			"-- * heatingThermostatSetpoint - set point for heating, supported units: \"C\" - Celsius, \"F\" - Fahrenheit",
			"",
			"-- handle action for mode change ",
			"function QuickApp:setThermostatMode(mode)",
			"    self:updateProperty(\"thermostatMode\", mode)",
			"end",
			"",
			"-- handle action for setting set point for cooling",
			"function QuickApp:setCoolingThermostatSetpoint(value) ",
			"    self:updateProperty(\"coolingThermostatSetpoint\", { value= value, unit= \"C\" })",
			"end",
			"",
			"-- handle action for setting set point for heating",
			"function QuickApp:setHeatingThermostatSetpoint(value) ",
			"    self:updateProperty(\"heatingThermostatSetpoint\", { value= value, unit= \"C\" })",
			"end",
			"",
			"-- To update controls you can use method self:updateView(<component ID>, <component property>, <desired value>). Eg:  ",
			"-- self:updateView(\"slider\", \"value\", \"55\") ",
			"-- self:updateView(\"button1\", \"text\", \"MUTE\") ",
			"-- self:updateView(\"label\", \"text\", \"TURNED ON\") ",
			"",
			"-- This is QuickApp inital method. It is called right after your QuickApp starts (after each save or on gateway startup). ",
			"-- Here you can set some default values, setup http connection or get QuickApp variables.",
			"-- To learn more, please visit: ",
			"--    * https://manuals.fibaro.com/home-center-3/",
			"--    * https://manuals.fibaro.com/home-center-3-quick-apps/",
			"",
			"function QuickApp:onInit()",
			"    self:debug(\"onInit\")",
			"",
			"    -- set supported modes for thermostat",
			"    self:updateProperty(\"supportedThermostatModes\", {\"Auto\", \"Off\", \"Heat\", \"Cool\"})",
			"",
			"    -- setup default values",
			"    self:updateProperty(\"thermostatMode\", \"Auto\")",
			"    self:setCoolingThermostatSetpoint(23)",
			"    self:setHeatingThermostatSetpoint(20)",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.hvacSystemAuto"
	},
	"humiditySensor": {
		"scope": "lua",
		"prefix": "com.fibaro.humiditySensor",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.humiditySensor",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Humidity sensor type have no actions to handle",
			"-- To update humidity, update property \"value\" with floating point number",
			"-- Eg. self:updateProperty(\"value\", 90.28) ",
			""
		],
		"description": "Inserts a template for a com.fibaro.humiditySensor"
	},
	"rainDetector": {
		"scope": "lua",
		"prefix": "com.fibaro.rainDetector",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.rainDetector",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Rain detector type has no actions to handle",
			"-- To update rain detector state, update property \"value\" with boolean",
			"-- Eg. self:updateProperty(\"value\", true) will indicate that rain was detected",
			""
		],
		"description": "Inserts a template for a com.fibaro.rainDetector"
	},
	"multilevelSensor": {
		"scope": "lua",
		"prefix": "com.fibaro.multilevelSensor",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.multilevelSensor",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Multilevel sensor type have no actions to handle",
			"-- To update multilevel sensor state, update property \"value\" with integer",
			"-- Eg. self:updateProperty(\"value\", 37.21) ",
			"",
			"-- To set unit of the sensor, update property \"unit\". You can set it on QuickApp initialization",
			"-- Eg. ",
			"-- function QuickApp:onInit()",
			"--     self:updateProperty(\"unit\", \"KB\")",
			"-- end",
			""
		],
		"description": "Inserts a template for a com.fibaro.multilevelSensor"
	},
	"weather": {
		"scope": "lua",
		"prefix": "com.fibaro.weather",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.weather",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Weather type have no actions to handle",
			"-- To update temperature, update property \"Temperature\" with floating point number, supported units: \"C\" - Celsius, \"F\" - Fahrenheit",
			"-- To update humidity, update property \"Humidity\" with floating point number",
			"-- To update wind speed, update property \"Wind\" with floating point number",
			"-- Eg. self:updateProperty(\"Temperature\", { value= 18.12, unit= \"C\" })",
			"-- To update weather condition, update properties \"ConditionCode\" and \"WeatherCondition\" or use method QuickApp:setCondition",
			"-- Eg. self:setCondition(\"clear\")",
			"",
			"-- Posible conditions: \"unknown\", \"clear\", \"rain\", \"snow\", \"storm\", \"cloudy\", \"partlyCloudy\", \"fog\"",
			"function QuickApp:setCondition(condition)",
			"    local conditionCodes = { ",
			"        unknown = 3200,",
			"        clear = 32,",
			"        rain = 40,",
			"        snow = 38,",
			"        storm = 4,",
			"        cloudy = 30,",
			"        partlyCloudy = 30,",
			"        fog = 20,",
			"    }",
			"",
			"    local conditionCode = conditionCodes[condition]",
			"",
			"    if conditionCode then",
			"        self:updateProperty(\"ConditionCode\", conditionCode)",
			"        self:updateProperty(\"WeatherCondition\", condition)",
			"    end",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.weather"
	},
	"smokeSensor": {
		"scope": "lua",
		"prefix": "com.fibaro.smokeSensor",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.smokeSensor",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Smoke detector type have no actions to handle",
			"-- To update smoke detector state, update property \"value\" with boolean",
			"-- Eg. self:updateProperty(\"value\", true) will indicate that smoke was detected ",
			""
		],
		"description": "Inserts a template for a com.fibaro.smokeSensor"
	},
	"gasDetector": {
		"scope": "lua",
		"prefix": "com.fibaro.gasDetector",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.gasDetector",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Gas detector type has no actions to handle",
			"-- To update gas detector state, update property \"value\" with boolean",
			"-- Eg. self:updateProperty(\"value\", true) will indicate that gas was detected",
			""
		],
		"description": "Inserts a template for a com.fibaro.gasDetector"
	},
	"doorLock": {
		"scope": "lua",
		"prefix": "com.fibaro.doorLock",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.doorLock",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Door lock type should handle actions secure, unsecure",
			"-- To update door lock state, update property \"secured\" with integer value (255 - secured, 0 - unsecured)",
			"",
			"function QuickApp:secure()",
			"    self:debug(\"door lock secured\")",
			"    self:updateProperty(\"secured\", 255)",
			"end",
			"",
			"function QuickApp:unsecure()",
			"    self:debug(\"door lock unsecured\")",
			"    self:updateProperty(\"secured\", 0)",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.doorLock"
	},
	"rollerShutter": {
		"scope": "lua",
		"prefix": "com.fibaro.rollerShutter",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.rollerShutter",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Roller shutter type should handle actions: open, close, stop",
			"-- To update roller shutter state, update property \"value\" with integer 0-99",
			"",
			"function QuickApp:open()",
			"    self:debug(\"roller shutter opened\")",
			"    self:updateProperty(\"value\", 99)",
			"end",
			"",
			"function QuickApp:close()",
			"    self:debug(\"roller shutter closed\")",
			"    self:updateProperty(\"value\", 0)    ",
			"end",
			"",
			"function QuickApp:stop()",
			"    self:debug(\"roller shutter stopped \")",
			"end",
			"",
			"-- Value is type of integer (0-99)",
			"function QuickApp:setValue(value)",
			"    self:debug(\"roller shutter set to: \" .. tostring(value))",
			"    self:updateProperty(\"value\", value)    ",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.rollerShutter"
	},
	"baseShutter": {
		"scope": "lua",
		"prefix": "com.fibaro.baseShutter",
		"body": [
			"if require and not QuickApp then require('hc3emu') end",
			"",
			"--%name=${1:MyQA}",
			"--%type=com.fibaro.baseShutter",
			"--%description=${2:My description}",
			"--%webui=true",
			"",
			"-- Base shutter type should handle actions: open, close, stop",
			"-- Base shutter supports \"state\" property with possible values: Opening, Opened, Closing, Closed",
			"",
			"function QuickApp:open()",
			"    self:debug(\"base shutter opened\")",
			"    self:updateProperty(\"state\", \"Opened\")",
			"end",
			"",
			"function QuickApp:close()",
			"    self:debug(\"base shutter closed\")",
			"    self:updateProperty(\"state\", \"Closed\")",
			"end",
			"",
			"function QuickApp:stop()",
			"    self:debug(\"base shutter stopped\")",
			"    self:updateProperty(\"state\", \"Unknown\")",
			"end",
			""
		],
		"description": "Inserts a template for a com.fibaro.baseShutter"
	},
	"QuickAppChild": {
		"scope": "lua",
		"prefix": "QuickAppChild",
		"body": [
			"class '${1:MyChild}'(QuickAppChild)",
			"function ${1:MyChild}:__init()",
			"    self:debug(self.name,self.id)",
			"end",
			"function ${1:MyChild}:__tostring()",
			"    return string.format(\"%s:%s\",self.name..self.id)",
			"end"
		],
		"description": "Inserts a template for a QuickAppChild"
	},
	"HTTPClient": {
		"scope": "lua",
		"prefix": "HTTPClient",
		"body": [
			"net.HTTPClient():request(\"${1:http://}\",{",
			"  options={",
			"    method=\"${2:GET}\",",
			"    headers={",
			"      [\"Content-Type\"]=\"application/json\",",
			"      [\"Accept\"]=\"application/json\",",
			"    },",
			"  },",
			"  success = function(response)",
			"    if response.status == 200 then",
			"      local data = json.decode(response.data)",
			"      fibaro.debug(__TAG,\"response:\", data)",
			"    else",
			"      fibaro.debug(__TAG,\"error:\", response.status, response.data)",
			"    end",
			"  end,",
			"  error = function(err)",
			"    fibaro.debug(__TAG,\"error:\", err)",
			"  end,",
			"})"
		],
		"description": "Inserts a template for a HTTPClient request"
	}
}
